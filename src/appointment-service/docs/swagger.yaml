basePath: /appointment-service
definitions:
  req.AppointmentChangeStatusReq:
    properties:
      status:
        enum:
        - pending
        - confirmed
        - cancelled
        type: string
    required:
    - status
    type: object
  req.AppointmentCreateReq:
    properties:
      confirmed_at:
        type: string
      doctor_id:
        type: string
      note:
        type: string
      patient_id:
        type: string
      scheduled_at:
        type: string
      status:
        enum:
        - pending
        - confirmed
        - cancelled
        type: string
    required:
    - doctor_id
    - patient_id
    - scheduled_at
    - status
    type: object
  req.AppointmentFilterReq:
    properties:
      doctor_id:
        type: string
      from_date:
        type: string
      patient_id:
        type: string
      status:
        type: string
      to_date:
        type: string
    type: object
  res.AppointmentDetailRes:
    properties:
      confirmed_at:
        type: string
      doctor_id:
        type: string
      id:
        type: string
      note:
        type: string
      patient_id:
        type: string
      scheduled_at:
        type: string
      status:
        type: string
    type: object
  response.ResErr:
    properties:
      errors:
        items:
          type: string
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.ResOk:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:3080
info:
  contact: {}
  description: API documentation for Hospital Microservice
  title: Hospital Microservice API
  version: "1.0"
paths:
  /appointment-service/appointments:
    get:
      consumes:
      - application/json
      description: Retrieve appointments with filters
      parameters:
      - description: Appointment Filter Request
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/req.AppointmentFilterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResErr'
      security:
      - BearerAuth: []
      summary: Get appointments with filters
      tags:
      - appointment
    post:
      consumes:
      - application/json
      description: Create a new appointment
      parameters:
      - description: Appointment Create Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.AppointmentCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ResOk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResErr'
      security:
      - BearerAuth: []
      summary: Create appointment
      tags:
      - appointment
  /appointment-service/appointments/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of an appointment by ID
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.AppointmentDetailRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResErr'
      security:
      - BearerAuth: []
      summary: Get appointment details
      tags:
      - appointment
  /appointment-service/appointments/{id}/status:
    patch:
      consumes:
      - application/json
      description: Change the status of an appointment by ID
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      - description: Appointment Change Status Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.AppointmentChangeStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResOk'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResErr'
      security:
      - BearerAuth: []
      summary: Change appointment status
      tags:
      - appointment
securityDefinitions:
  BearerAuth:
    description: Type "Bearer {your-token}"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
